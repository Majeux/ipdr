#ifndef CLI_H
#define CLI_H

#include "dag.h"
#include "io.h"
#include "logger.h"
#include "tactic.h"

#include <cxxopts.hpp>
#include <fmt/core.h>
#include <memory>
#include <ostream>
#include <stdexcept>
#include <string>
#include <variant>

namespace my::cli
{
  using namespace cxxopts;
  using namespace my::io;

  namespace fs = ghc::filesystem;

  class ArgumentList;

  namespace graph_src
  {
    struct benchFile
    {
      std::string name;
      fs::path file;

      benchFile() {}
    };

    struct tfcFile
    {
      std::string name;
      fs::path file;
    };

    struct Hop
    {
      unsigned bits;
      unsigned mod;
      Hop(unsigned b, unsigned m) : bits(b), mod(m) {}
    };

    using Graph_var = std::variant<benchFile, tfcFile, Hop>;

    std::string get_name(const Graph_var& m);
    dag::Graph make_graph(const Graph_var& g);
  } // namespace graph_src

  namespace model_type
  {
    using namespace graph_src;

    struct t_Pebbling
    {
      std::optional<unsigned> max_pebbles; // starting value for constraint
      Graph_var model;
    };

    struct t_Peterson
    {
      unsigned start;
      unsigned max;
    };

    using Model_var = std::variant<t_Pebbling, t_Peterson>;

    std::string to_string(const Model_var& m);
    std::string filetag(const Model_var& m);
  } // namespace model_type

  namespace algo
  {
    using namespace model_type;

    struct PDR
    {
    };

    struct IPDR
    {
      pdr::Tactic type;
      IPDR(pdr::Tactic t) : type(t) {}
    };

    struct Bounded
    {
    };

    using Algo_var = std::variant<PDR, IPDR, Bounded>;

    std::string to_string(const Algo_var& a);
    const Model_var& get_model(const Algo_var& a);
  } // namespace algo

  struct Experiment
  {
    unsigned repetitions;
    bool control;
  };

  enum class ModelType
  {
    none,
    tfc,
    bench,
    hoperator
  };

  class ArgumentList
  {
   public:
    FolderStructure folders;
    OutLvl verbosity{ OutLvl::whisper };
    std::optional<std::string> out; // filename to redirect logging out messages

    algo::Algo_var algorithm;
    model_type::Model_var model;
    std::optional<graph_src::Graph_var> src;

    std::optional<Experiment> experiment;
    // bool rand; // use a seed for the solver. generated by time(0)
    // std::optional<unsigned> seed; // the seed for the solver
    std::variant<bool, unsigned> r_seed;
    bool tseytin;  // encode pebbling::Model transition using tseyting enconding
    bool onlyshow; // only read in and produce the model image and description

    bool _failed = false;

    ArgumentList(int argc, char* argv[]);
    void show_header(std::ostream& out) const;
    const FolderStructure make_folders() const;
    std::string file_name() const;
    std::string run_folder_name() const;
    fs::path create_model_dir() const;
    fs::path setup_run_path() const;

   private:
    // constructor helpers
    Options make_options(std::string name);
    void parse_verbosity(const ParseResult& clresult);
    void parse_alg(const ParseResult& clresult);
    void parse_run(const ParseResult& clresult);
    graph_src::Graph_var parse_graph_src(const ParseResult& clresult);

    // cli names
    inline static const std::string o_alg     = "alg";
    inline static const std::string s_pdr     = "pdr";
    inline static const std::string s_ipdr    = "ipdr";
    inline static const std::string s_bounded = "bounded";

    inline static const std::string s_pebbling = "pebbling";
    inline static const std::string s_peter    = "peterson";

    inline static const std::string s_exp     = "experiment";
    inline static const std::string s_control = "control";

    inline static const std::string o_inc       = "incrementality";
    inline static const std::string s_constrain = "constrain";
    inline static const std::string s_relax     = "relax";

    inline static const std::string s_pebbles = "pebbles";
    inline static const std::string s_procs   = "processes";

    inline static const std::string s_dir   = "dir";
    inline static const std::string s_bench = "bench";
    inline static const std::string s_tfc   = "tfc";
    inline static const std::string s_hop   = "hop";

    inline static const std::string s_rand    = "rand";
    inline static const std::string s_seed    = "seed";
    inline static const std::string s_tseytin = "tseytin";
    inline static const std::string s_show    = "show-only";

    inline static const std::string s_verbose = "verbose";
    inline static const std::string s_whisper = "whisper";
    inline static const std::string s_silent  = "silent";

    inline static const std::string s_mic = "mic-attempts";
  };
} // namespace my::cli
#endif // CLI_H
